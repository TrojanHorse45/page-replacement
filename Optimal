#include <stdio.h>
#include <stdlib.h>

void display(int frames[], int m) {
    for (int i = 0; i < m; i++) {
        if (frames[i] != -1)
            printf("%d\t", frames[i]);
        else
            printf("-\t");
    }
    printf("\n");
}
int main() {
    int n, m; // n = number of pages, m = number of frames
    printf("Enter length of the reference string: ");
    scanf("%d", &n);

    int page[n];
    printf("Enter the reference string: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &page[i]);
    }
    printf("Enter number of frames: ");
    scanf("%d", &m);
    int frames[m];
    int lg[m]; // lg[] stores the distances for pages in frames
    int pf = 0; // Page fault counter
    // Initialize frames to -1 (empty)
    for (int i = 0; i < m; i++) {
        frames[i] = -1;
    }
    printf("\nFrame contents after each page:\n");
    // Simulate page replacement
    for (int j = 0; j < n; j++) {
        int flag1 = 0, flag2 = 0;
        // Check if the page is already in a frame (page hit)
        for (int i = 0; i < m; i++) {
            if (frames[i] == page[j]) {
                flag1 = 1;
                flag2 = 1;
                break;
            }
        }

        // If the page is not in a frame and there is an empty frame
        if (flag1 == 0) {
            for (int i = 0; i < m; i++) {
                if (frames[i] == -1) {
                    frames[i] = page[j];
                    flag2 = 1;
                    pf++;
                    break;
                }
            }
        }
        // If no empty frame is found, apply the Optimal replacement policy
        if (flag2 == 0) {
            for (int i = 0; i < m; i++) {
                lg[i] = 0; // Reset distances
            }
            // Find the next occurrence of each page in the frames
            for (int i = 0; i < m; i++) {
                for (int k = j + 1; k < n; k++) {
                    if (frames[i] == page[k]) {
                        lg[i] = k - j; // Calculate distance
                        break;
                    }
                }
            }
            // Find the frame with the page farthest in the future (or never used again)
            int found = 0, index = 0, max = -1;
            for (int i = 0; i < m; i++) {
                if (lg[i] == 0) { // This page is not used again
                    index = i;
                    found = 1;
                    break;
                } else if (lg[i] > max) { // Update if distance is larger
                    max = lg[i];
                    index = i;
                }
            }
            // Replace the page in the identified frame
            frames[index] = page[j];
            pf++;
        }
        // Display the current frame contents
        display(frames, m);
    }
    // Output the number of page faults and page fault rate
    printf("\nNumber of page faults: %d\n", pf);
    float pr = (float)pf / n * 100;
    printf("Page fault rate = %.2f%%\n", pr);
    return 0;
}
